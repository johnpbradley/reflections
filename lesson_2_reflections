What happens when you initialize a repository? Why do you need to do it?
An empty .git directory is created. If you didn't git init it wouldn't be there

How is the staging area different from the working directory and the
repository? What value do you think it offers?
The staging area is the in-between area where changes are setup to go into the
repository. This allows greater control over what each commit commits.

How can you use the staging area to make sure you have one commit per logical
change?
After using git status to see that all of the files you've added are similar in
scope, git diff --staged can be used to confirm that all of the changes are
part of the same logical change.

What are some situations when branches would be helpful in keeping your history
organised? How would branches help?
If you have a public repository, you can make a branch for "release" versions
and for "stable" versions.

How do the diagrams help you visualize the branch structure?
They give a more natural look to where the branches are in relation to the
master branch, or even other branches.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
Merging two branches will update one of the branches to a new commit which
contains the changes of both branches. We represent it the way we do because it
clearly shows how far apart each branch head is from each other.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

Pros: a lot of times the merges will be trivial and would save on time & effort
Cons: sometimes you will get problems if git merges two branches with unspotted
conflicts.
